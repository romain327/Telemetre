/*<simulation_settings>
<ftestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=verilog --write_settings_files=off Convertisseur_bin_to_bcd_Test -c Convertisseur_bin_to_bcd --vector_source="/home/romain/Bureau/Universite/4A/Programmation HDL/Activites Pratiques/AP4/TESTS/Transcodeur_bin_to_bcd/Convertisseur_bin_to_bcd.vwf" --testbench_file="/home/romain/Bureau/Universite/4A/Programmation HDL/Activites Pratiques/AP4/TESTS/Transcodeur_bin_to_bcd/simulation/qsim/Convertisseur_bin_to_bcd.vwf.vt"</ftestbench_cmd>
<ttestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=verilog --write_settings_files=off Convertisseur_bin_to_bcd_Test -c Convertisseur_bin_to_bcd --vector_source="/home/romain/Bureau/Universite/4A/Programmation HDL/Activites Pratiques/AP4/TESTS/Transcodeur_bin_to_bcd/Convertisseur_bin_to_bcd.vwf" --testbench_file="/home/romain/Bureau/Universite/4A/Programmation HDL/Activites Pratiques/AP4/TESTS/Transcodeur_bin_to_bcd/simulation/qsim/Convertisseur_bin_to_bcd.vwf.vt"</ttestbench_cmd>
<fnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=on --flatten_buses=off --tool=modelsim_oem --format=verilog --output_directory="/home/romain/Bureau/Universite/4A/Programmation HDL/Activites Pratiques/AP4/TESTS/Transcodeur_bin_to_bcd/simulation/qsim/" Convertisseur_bin_to_bcd_Test -c Convertisseur_bin_to_bcd</fnetlist_cmd>
<tnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=off --flatten_buses=off --timescale=1ps --tool=modelsim_oem --format=verilog --output_directory="/home/romain/Bureau/Universite/4A/Programmation HDL/Activites Pratiques/AP4/TESTS/Transcodeur_bin_to_bcd/simulation/qsim/" Convertisseur_bin_to_bcd_Test -c Convertisseur_bin_to_bcd</tnetlist_cmd>
<modelsim_script>onerror {exit -code 1}
vlib work
vlog -work work Convertisseur_bin_to_bcd.vo
vlog -work work Convertisseur_bin_to_bcd.vwf.vt
vsim -novopt -c -t 1ps -L cycloneive_ver -L altera_ver -L altera_mf_ver -L 220model_ver -L sgate_ver -L altera_lnsim_ver work.Convertisseur_bin_to_bcd_vlg_vec_tst
vcd file -direction Convertisseur_bin_to_bcd_Test.msim.vcd
vcd add -internal Convertisseur_bin_to_bcd_vlg_vec_tst/*
vcd add -internal Convertisseur_bin_to_bcd_vlg_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f
</modelsim_script>
<modelsim_script_timing>onerror {exit -code 1}
vlib work
vlog -work work Convertisseur_bin_to_bcd.vo
vlog -work work Convertisseur_bin_to_bcd.vwf.vt
vsim -novopt -c -t 1ps -L cycloneive_ver -L altera_ver -L altera_mf_ver -L 220model_ver -L sgate_ver -L altera_lnsim_ver work.Convertisseur_bin_to_bcd_vlg_vec_tst
vcd file -direction Convertisseur_bin_to_bcd_Test.msim.vcd
vcd add -internal Convertisseur_bin_to_bcd_vlg_vec_tst/*
vcd add -internal Convertisseur_bin_to_bcd_vlg_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f
</modelsim_script_timing>
<hdl_lang>verilog</hdl_lang>
</simulation_settings>*/
/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2017  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 100000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("Distance")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Distance[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "Distance";
}

SIGNAL("Distance[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "Distance";
}

SIGNAL("Distance[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "Distance";
}

SIGNAL("Distance[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "Distance";
}

SIGNAL("Distance[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "Distance";
}

SIGNAL("Distance[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "Distance";
}

SIGNAL("Distance[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "Distance";
}

SIGNAL("Distance[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "Distance";
}

SIGNAL("Clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Centaine")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Centaine[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Centaine";
}

SIGNAL("Centaine[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Centaine";
}

SIGNAL("Centaine[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Centaine";
}

SIGNAL("Centaine[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Centaine";
}

SIGNAL("Dizaine")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Dizaine[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Dizaine";
}

SIGNAL("Dizaine[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Dizaine";
}

SIGNAL("Dizaine[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Dizaine";
}

SIGNAL("Dizaine[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Dizaine";
}

SIGNAL("Unite")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Unite[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Unite";
}

SIGNAL("Unite[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Unite";
}

SIGNAL("Unite[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Unite";
}

SIGNAL("Unite[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Unite";
}

TRANSITION_LIST("Distance[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 35000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 4800.0;
		LEVEL 0 FOR 43000.0;
		LEVEL 1 FOR 12200.0;
	}
}

TRANSITION_LIST("Distance[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 15000.0;
		LEVEL 0 FOR 15000.0;
		LEVEL 1 FOR 10000.0;
		LEVEL 0 FOR 26800.0;
		LEVEL 1 FOR 21000.0;
		LEVEL 0 FOR 12200.0;
	}
}

TRANSITION_LIST("Distance[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 15000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 15000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 4800.0;
		LEVEL 0 FOR 11000.0;
		LEVEL 1 FOR 11000.0;
		LEVEL 0 FOR 10000.0;
		LEVEL 1 FOR 11000.0;
		LEVEL 0 FOR 11000.0;
		LEVEL 1 FOR 1200.0;
	}
}

TRANSITION_LIST("Distance[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 15000.0;
		LEVEL 1 FOR 15000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 9800.0;
		LEVEL 0 FOR 6000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 6000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 6000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 6000.0;
		LEVEL 0 FOR 1200.0;
	}
}

TRANSITION_LIST("Distance[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 30000.0;
		LEVEL 1 FOR 4800.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3000.0;
			LEVEL 1 FOR 3000.0;
			LEVEL 0 FOR 2000.0;
			LEVEL 1 FOR 3000.0;
			LEVEL 0 FOR 3000.0;
			LEVEL 1 FOR 2000.0;
		}
		LEVEL 0 FOR 3000.0;
		LEVEL 1 FOR 3000.0;
		LEVEL 0 FOR 1200.0;
	}
}

TRANSITION_LIST("Distance[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 15000.0;
		LEVEL 1 FOR 9800.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 2000.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
		}
		LEVEL 0 FOR 2000.0;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 2000.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 200.0;
	}
}

TRANSITION_LIST("Distance[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 19800.0;
		LEVEL 0 FOR 1000.0;
		NODE
		{
			REPEAT = 13;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 2000.0;
		}
		LEVEL 1 FOR 2000.0;
		LEVEL 0 FOR 200.0;
	}
}

TRANSITION_LIST("Distance[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 15000.0;
		LEVEL 0 FOR 5000.0;
		LEVEL 1 FOR 4800.0;
		NODE
		{
			REPEAT = 27;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
		}
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 200.0;
	}
}

TRANSITION_LIST("Clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 20;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
		}
	}
}

TRANSITION_LIST("Centaine[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Centaine[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Centaine[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Centaine[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Dizaine[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Dizaine[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Dizaine[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Dizaine[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Unite[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Unite[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Unite[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

TRANSITION_LIST("Unite[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "Distance";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "Distance[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Distance[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Distance[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Distance[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Distance[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Distance[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Distance[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Distance[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Centaine";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
	CHILDREN = 11, 12, 13, 14;
}

DISPLAY_LINE
{
	CHANNEL = "Centaine[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "Centaine[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "Centaine[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "Centaine[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "Dizaine";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
	CHILDREN = 16, 17, 18, 19;
}

DISPLAY_LINE
{
	CHANNEL = "Dizaine[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "Dizaine[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "Dizaine[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "Dizaine[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "Unite";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
	CHILDREN = 21, 22, 23, 24;
}

DISPLAY_LINE
{
	CHANNEL = "Unite[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "Unite[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "Unite[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "Unite[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 20;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
